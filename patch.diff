diff -uraN original/moba-desktop/src/app/app.js modified/moba-desktop/src/app/app.js
--- original/moba-desktop/src/app/app.js	2021-11-04 20:19:04.980694047 +0000
+++ modified/moba-desktop/src/app/app.js	2021-11-04 20:19:05.007360711 +0000
@@ -57,4 +57,4 @@
     });
 }
 exports.runApp = runApp;
-//# sourceMappingURL=app.js.map
\ No newline at end of file
+//# sourceMappingURL=app.js.map
diff -uraN original/moba-desktop/src/app/auto-update.js modified/moba-desktop/src/app/auto-update.js
--- original/moba-desktop/src/app/auto-update.js	2021-11-04 20:19:04.980694047 +0000
+++ modified/moba-desktop/src/app/auto-update.js	2021-11-04 20:19:05.007360711 +0000
@@ -23,7 +23,7 @@
 function init() {
     electron_updater_1.autoUpdater.autoDownload = false;
     electron_updater_1.autoUpdater.allowDowngrade = true;
-    electron_updater_1.autoUpdater.autoInstallOnAppQuit = true;
+    electron_updater_1.autoUpdater.autoInstallOnAppQuit = false;
     electron_updater_1.autoUpdater.logger = logs_1.appAutoUpdateLog;
     if (environment_1.IS_ELECTRON_DEV) {
         electron_updater_1.autoUpdater.channel = app_config_1.DESKTOP_DEV_UPDATE_CHANNEL;
@@ -53,7 +53,7 @@
         main_window_1.sendAppUpdateStatus(desktop_types_1.AppUpdateStatus.UPDATE_DOWNLOADED);
     });
     electron_updater_1.autoUpdater.on('error', err => {
-        main_window_1.sendAppUpdateStatus(desktop_types_1.AppUpdateStatus.ERROR);
+        //main_window_1.sendAppUpdateStatus(desktop_types_1.AppUpdateStatus.ERROR);
         logs_1.appAutoUpdateLog.error('Error: ', err);
     });
     setInterval(checkForUpdates, app_config_1.DESKTOP_APP_UPDATE_INTERVAL);
@@ -85,4 +85,4 @@
     electron_updater_1.autoUpdater.quitAndInstall();
 }
 exports.quitAndInstall = quitAndInstall;
-//# sourceMappingURL=auto-update.js.map
\ No newline at end of file
+//# sourceMappingURL=auto-update.js.map
diff -uraN original/moba-desktop/src/app/deep-linking.js modified/moba-desktop/src/app/deep-linking.js
--- original/moba-desktop/src/app/deep-linking.js	2021-11-04 20:19:04.980694047 +0000
+++ modified/moba-desktop/src/app/deep-linking.js	2021-11-04 20:19:05.007360711 +0000
@@ -34,8 +34,10 @@
 const ipc_messages_types_1 = require("../../../moba-web/src/common/types/desktop/ipc-messages.types");
 function initDeepLinking() {
     electron_1.app.removeAsDefaultProtocolClient(app_config_1.MOBA_PROTOCOL_NAME);
-    if (environment_1.IS_ELECTRON_DEV && environment_1.isWin) {
-        electron_1.app.setAsDefaultProtocolClient(app_config_1.MOBA_PROTOCOL_NAME, process.execPath, [path.resolve(process.argv[1])]);
+    if (process.defaultApp) {
+        if (process.argv.length >= 2) {
+            electron_1.app.setAsDefaultProtocolClient(app_config_1.MOBA_PROTOCOL_NAME, process.execPath, [path.resolve(process.argv[1])]);
+        }
     }
     else {
         electron_1.app.setAsDefaultProtocolClient(app_config_1.MOBA_PROTOCOL_NAME);
@@ -52,7 +54,7 @@
         main_window_1.showAndRestoreMainWindow();
     });
     electron_1.app.on('second-instance', (_e, argv) => {
-        if (environment_1.isWin) {
+        if (environment_1.isWin || environment_1.isLinux) {
             const url = argv.find(it => it.startsWith(`${app_config_1.MOBA_PROTOCOL_NAME}:`));
             url && processDeepLinkingUrl(url);
         }
@@ -84,4 +86,4 @@
         logs_1.appUrlsLog.error('Unknown moba protocol communication url: ', { url });
     }
 }
-//# sourceMappingURL=deep-linking.js.map
\ No newline at end of file
+//# sourceMappingURL=deep-linking.js.map
diff -uraN original/moba-desktop/src/app/ipc-protocol/ipc-protocol.js modified/moba-desktop/src/app/ipc-protocol/ipc-protocol.js
--- original/moba-desktop/src/app/ipc-protocol/ipc-protocol.js	2021-11-04 20:19:04.980694047 +0000
+++ modified/moba-desktop/src/app/ipc-protocol/ipc-protocol.js	2021-11-04 20:19:05.007360711 +0000
@@ -170,7 +170,7 @@
     }));
     ipc_main_1.ipcMainHandle(ipc_messages_types_1.IPC_MESSAGE.IS_TOBII_AVAILABLE, () => {
         return new Promise(resolve => {
-            if (environment_1.isWin) {
+            if (environment_1.isWin || environment_1.isLinux) {
                 const reader = new gaze_reader_process_1.GazeReaderProcess();
                 reader
                     .spawn(null)
@@ -197,7 +197,7 @@
     });
     ipc_main_1.ipcMainHandle(ipc_messages_types_1.IPC_MESSAGE.CHECK_TOBII_TRACKER_STATUS, () => {
         return new Promise(resolve => {
-            if (environment_1.isWin) {
+            if (environment_1.isWin || environment_1.isLinux) {
                 const reader = new gaze_reader_process_1.GazeReaderProcess();
                 reader
                     .spawn(null)
@@ -242,4 +242,4 @@
     app_settings_ipc_1.initAppSettingsIpc();
 }
 exports.init = init;
-//# sourceMappingURL=ipc-protocol.js.map
\ No newline at end of file
+//# sourceMappingURL=ipc-protocol.js.map
diff -uraN original/moba-desktop/src/dialogs/select-game-folder-dialog.js modified/moba-desktop/src/dialogs/select-game-folder-dialog.js
--- original/moba-desktop/src/dialogs/select-game-folder-dialog.js	2021-11-04 20:20:31.334026099 +0000
+++ modified/moba-desktop/src/dialogs/select-game-folder-dialog.js	2021-11-04 20:20:40.714025958 +0000
@@ -17,7 +17,7 @@
     if (electron_1.remote) {
         return electron_1.remote.dialog
             .showOpenDialog(window, {
-            title: 'Choose the LoL installation path. e.g C:\\Riot Games\\League of Legends',
+            title: 'Choose the LoL installation path. e.g drive_c/Riot Games/League of Legends/ (click cancel if font is missing)',
             message: 'Choose the LoL installation path. e.g /Applications/League of Legends.app/',
             buttonLabel: 'Select Directory',
             properties: ['openDirectory', 'treatPackageAsDirectory', 'showHiddenFiles'],
diff -uraN original/moba-desktop/src/gaze-reader/gaze-reader-game-processor.js modified/moba-desktop/src/gaze-reader/gaze-reader-game-processor.js
--- original/moba-desktop/src/gaze-reader/gaze-reader-game-processor.js	2021-11-04 20:19:04.977360711 +0000
+++ modified/moba-desktop/src/gaze-reader/gaze-reader-game-processor.js	2021-11-04 20:19:05.007360711 +0000
@@ -26,7 +26,7 @@
         this.reader = null;
         this.gamesInfoMap = null;
         this.gameStarted = (gameId, summoner, qType) => {
-            if (!environment_1.isWin)
+            if (!(environment_1.isWin || environment_1.isLinux))
                 return;
             if (!app_settings_1.getAppSettings().isTobiiEyeTrackerEnabled())
                 return;
@@ -42,7 +42,7 @@
             });
         };
         this.gameFinished = (gameId) => {
-            if (!environment_1.isWin)
+            if (!(environment_1.isWin || environment_1.isLinux))
                 return;
             if (!app_settings_1.getAppSettings().isTobiiEyeTrackerEnabled())
                 return;
@@ -202,4 +202,4 @@
 }
 exports.GazeReaderGameProcessor = GazeReaderGameProcessor;
 GazeReaderGameProcessor.instance = null;
-//# sourceMappingURL=gaze-reader-game-processor.js.map
\ No newline at end of file
+//# sourceMappingURL=gaze-reader-game-processor.js.map
diff -uraN original/moba-desktop/src/gaze-reader/gaze-reader-process.js modified/moba-desktop/src/gaze-reader/gaze-reader-process.js
--- original/moba-desktop/src/gaze-reader/gaze-reader-process.js	2021-11-04 20:19:04.977360711 +0000
+++ modified/moba-desktop/src/gaze-reader/gaze-reader-process.js	2021-11-04 20:19:05.007360711 +0000
@@ -15,7 +15,7 @@
         this.spawn = (targetPath) => {
             var _a, _b;
             logs_1.gazeReaderLog.debug(`Spawn ${paths_1.TOBII_BINARY_LOCAL_PATH}, pid: ${(_a = this.readerProcess) === null || _a === void 0 ? void 0 : _a.pid}`);
-            if (!environment_1.isWin)
+            if ( !(environment_1.isWin|| environment_1.isLinux))
                 return Promise.reject();
             if (this.readerProcess) {
                 logs_1.gazeReaderLog.error(`Already spawned, pid: ${(_b = this.readerProcess) === null || _b === void 0 ? void 0 : _b.pid}`);
@@ -56,7 +56,7 @@
         this.kill = () => {
             var _a, _b;
             logs_1.gazeReaderLog.debug(`Kill, pid: ${(_a = this.readerProcess) === null || _a === void 0 ? void 0 : _a.pid}`);
-            if (!environment_1.isWin)
+            if ( !(environment_1.isWin|| environment_1.isLinux))
                 return;
             if (!this.readerProcess) {
                 logs_1.gazeReaderLog.error(`Already killed`);
@@ -132,7 +132,7 @@
         this.write = (msg) => {
             var _a, _b;
             logs_1.gazeReaderLog.debug(`Write ${msg}, pid: ${(_a = this.readerProcess) === null || _a === void 0 ? void 0 : _a.pid}`);
-            if (!environment_1.isWin)
+            if ( !(environment_1.isWin|| environment_1.isLinux))
                 return;
             if (!this.readerProcess) {
                 logs_1.gazeReaderLog.error('Unable to write', `process is killed`);
@@ -178,7 +178,7 @@
             return !!(this.unresolvedOpsList && this.unresolvedOpsList.length > 0);
         };
         this.isTobiiAvailable = () => {
-            if (!environment_1.isWin)
+            if ( !(environment_1.isWin|| environment_1.isLinux))
                 return Promise.reject();
             return new Promise((resolve, reject) => {
                 const hasOp = this.hasAsyncOp(gaze_reader_1.GrAsyncOperation.IS_TOBII_AVAILABLE);
@@ -187,7 +187,7 @@
             });
         };
         this.checkTrackerStatus = () => {
-            if (!environment_1.isWin)
+            if ( !(environment_1.isWin|| environment_1.isLinux))
                 return Promise.reject();
             return new Promise((resolve, reject) => {
                 const hasOp = this.hasAsyncOp(gaze_reader_1.GrAsyncOperation.CHECK_TRACKER_STATUS);
@@ -196,7 +196,7 @@
             });
         };
         this.sessionStart = (msg) => {
-            if (!environment_1.isWin)
+            if ( !(environment_1.isWin|| environment_1.isLinux))
                 return Promise.reject();
             return new Promise((resolve, reject) => {
                 const hasOp = this.hasAsyncOp(gaze_reader_1.GrAsyncOperation.SESSION_START);
@@ -205,7 +205,7 @@
             });
         };
         this.sessionUpdate = (msg) => {
-            if (!environment_1.isWin)
+            if ( !(environment_1.isWin|| environment_1.isLinux))
                 return Promise.reject();
             return new Promise((resolve, reject) => {
                 const hasOp = this.hasAsyncOp(gaze_reader_1.GrAsyncOperation.SESSION_UPDATE);
@@ -214,7 +214,7 @@
             });
         };
         this.sessionEnd = () => {
-            if (!environment_1.isWin)
+            if ( !(environment_1.isWin|| environment_1.isLinux))
                 return Promise.reject();
             return new Promise((resolve, reject) => {
                 const hasOp = this.hasAsyncOp(gaze_reader_1.GrAsyncOperation.SESSION_END);
@@ -223,7 +223,7 @@
             });
         };
         this.stop = () => {
-            if (!environment_1.isWin)
+            if (!(environment_1.isWin|| environment_1.isLinux))
                 return Promise.reject();
             return new Promise((resolve, reject) => {
                 const hasOp = this.hasAsyncOp(gaze_reader_1.GrAsyncOperation.PROCESS_STOP);
@@ -234,4 +234,4 @@
     }
 }
 exports.GazeReaderProcess = GazeReaderProcess;
-//# sourceMappingURL=gaze-reader-process.js.map
\ No newline at end of file
+//# sourceMappingURL=gaze-reader-process.js.map
diff -uraN original/moba-desktop/src/lol/utils/in-game-imports/in-game-items-import.js modified/moba-desktop/src/lol/utils/in-game-imports/in-game-items-import.js
--- original/moba-desktop/src/lol/utils/in-game-imports/in-game-items-import.js	2021-11-04 20:19:04.974027379 +0000
+++ modified/moba-desktop/src/lol/utils/in-game-imports/in-game-items-import.js	2021-11-04 20:19:05.007360711 +0000
@@ -44,7 +44,7 @@
             if (!gameItemsData.blocks.length)
                 return in_game_imports_types_1.LcuGameItemsImportStatus.EMPTY_BLOCKS_LIST;
             const processGamePath = yield lcu_connection_1.getLCUPathFromProcess();
-            const gamePath = processGamePath || app_settings_1.getAppSettings().getGameFolderPath();
+            const gamePath = app_settings_1.getAppSettings().getGameFolderPath();
             if (!gamePath)
                 return in_game_imports_types_1.LcuGameItemsImportStatus.GAME_PATH_NOT_FOUND;
             const filePath = path_1.default.join(gamePath, 'Config', 'Global', 'Recommended', '!mobalytics.json');
@@ -70,4 +70,4 @@
     });
 }
 exports.importLolGameItems = importLolGameItems;
-//# sourceMappingURL=in-game-items-import.js.map
\ No newline at end of file
+//# sourceMappingURL=in-game-items-import.js.map
diff -uraN original/moba-desktop/src/main.js modified/moba-desktop/src/main.js
--- original/moba-desktop/src/main.js	2021-11-04 20:19:04.967360713 +0000
+++ modified/moba-desktop/src/main.js	2021-11-04 20:19:05.007360711 +0000
@@ -1,6 +1,7 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 const electron_1 = require("electron");
+require('@electron/remote/main').initialize();
 const app_1 = require("./app/app");
 const logs_1 = require("./utils/logs");
 require("../../moba-web/src/common/types/global.types");
@@ -9,4 +10,14 @@
 MakePromisesSafe.logError = (err) => logs_1.generalLog.error('Uncaught promise exception error: ', err);
 const gotTheLock = electron_1.app.requestSingleInstanceLock();
 gotTheLock ? app_1.runApp() : electron_1.app.quit();
-//# sourceMappingURL=main.js.map
\ No newline at end of file
+//# sourceMappingURL=main.js.map
+process
+    .on('unhandledRejection', (reason, p) => {
+        electron_1.dialog.showMessageBoxSync(null, {title: "Uncaught Error", message: err});
+        console.error(reason, 'Unhandled Rejection at Promise', p);
+    })
+    .on('uncaughtException', err => {
+        electron_1.dialog.showMessageBoxSync(null, {title: "Uncaught Error", message: err});
+        console.error(err, 'Uncaught Exception thrown');
+        process.exit(1);
+    });
diff -uraN original/moba-desktop/src/utils/desktop-bridge.js modified/moba-desktop/src/utils/desktop-bridge.js
--- original/moba-desktop/src/utils/desktop-bridge.js	2021-11-04 20:19:04.967360713 +0000
+++ modified/moba-desktop/src/utils/desktop-bridge.js	2021-11-04 20:19:05.007360711 +0000
@@ -23,6 +23,7 @@
 const os = __importStar(require("os"));
 const path = __importStar(require("path"));
 const electron_1 = require("electron");
+electron_1.remote = require('@electron/remote');
 const select_game_folder_dialog_1 = require("../dialogs/select-game-folder-dialog");
 const ipc_renderer_1 = require("./ipc-renderer");
 const environment_1 = require("./environment");
@@ -53,4 +54,4 @@
     hideCurrentWindow: () => electron_1.remote.getCurrentWindow().hide(),
     openSelectGameDialogInCurrentWindow: () => select_game_folder_dialog_1.showSelectFolderDialog(electron_1.remote.getCurrentWindow()),
 };
-//# sourceMappingURL=desktop-bridge.js.map
\ No newline at end of file
+//# sourceMappingURL=desktop-bridge.js.map
diff -uraN original/moba-desktop/src/utils/environment.js modified/moba-desktop/src/utils/environment.js
--- original/moba-desktop/src/utils/environment.js	2021-11-04 20:19:04.967360713 +0000
+++ modified/moba-desktop/src/utils/environment.js	2021-11-04 20:19:05.007360711 +0000
@@ -23,15 +23,16 @@
 const path = __importStar(require("path"));
 exports.isOsX = process.platform === 'darwin';
 exports.isWin = process.platform === 'win32';
+exports.isLinux = process.platform === 'linux';
 exports.isX64 = process.arch === 'x64';
 exports.IS_JEST_TESTING = process.env.JEST_WORKER_ID !== undefined;
-exports.IS_ELECTRON_DEV = require('electron-is-dev');
+exports.IS_ELECTRON_DEV = false;
 exports.LoLProcessNameWin = 'LeagueClient.exe';
 exports.LoLProcessNameMac = 'LeagueClient.app';
-exports.LolProcessName = exports.isWin ? exports.LoLProcessNameWin : exports.LoLProcessNameMac;
+exports.LolProcessName = (exports.isWin || exports.isLinux) ? exports.LoLProcessNameWin : exports.LoLProcessNameMac;
 exports.RiotClientNameWin = 'RiotClientServices.exe';
 exports.RiotClientNameMac = '';
-exports.RiotClientName = exports.isWin ? exports.RiotClientNameWin : exports.RiotClientNameMac;
+exports.RiotClientName = (exports.isWin || exports.isLinux) ? exports.RiotClientNameWin : exports.RiotClientNameMac;
 exports.LolLogsSubPath = path.join('Logs', 'GameLogs');
 exports.DEV_APP_VERSION = '999.999.999';
-//# sourceMappingURL=environment.js.map
\ No newline at end of file
+//# sourceMappingURL=environment.js.map
diff -uraN original/moba-desktop/src/utils/game-overlay/game-overlay-window.js modified/moba-desktop/src/utils/game-overlay/game-overlay-window.js
--- original/moba-desktop/src/utils/game-overlay/game-overlay-window.js	2021-11-04 20:19:04.967360713 +0000
+++ modified/moba-desktop/src/utils/game-overlay/game-overlay-window.js	2021-11-04 20:19:05.007360711 +0000
@@ -2,6 +2,7 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.onOverlayWindowContentLoaded = void 0;
 const electron_1 = require("electron");
+electron_1.remote = require('@electron/remote');
 const isOverlayPage = (content) => {
     return /mobalytics-in-game-overlay-marker/gim.test(content);
 };
@@ -12,4 +13,4 @@
         wnd.close();
     }
 };
-//# sourceMappingURL=game-overlay-window.js.map
\ No newline at end of file
+//# sourceMappingURL=game-overlay-window.js.map
diff -uraN original/moba-desktop/src/utils/lcu-connection.js modified/moba-desktop/src/utils/lcu-connection.js
--- original/moba-desktop/src/utils/lcu-connection.js	2021-11-04 20:19:04.967360713 +0000
+++ modified/moba-desktop/src/utils/lcu-connection.js	2021-11-04 20:19:05.007360711 +0000
@@ -124,4 +124,4 @@
     });
 }
 exports.isValidLCUPath = isValidLCUPath;
-//# sourceMappingURL=lcu-connection.js.map
\ No newline at end of file
+//# sourceMappingURL=lcu-connection.js.map
diff -uraN original/moba-desktop/src/windows/about/about.preload.js modified/moba-desktop/src/windows/about/about.preload.js
--- original/moba-desktop/src/windows/about/about.preload.js	2021-11-04 20:19:04.967360713 +0000
+++ modified/moba-desktop/src/windows/about/about.preload.js	2021-11-04 20:19:05.007360711 +0000
@@ -21,10 +21,11 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 const os = __importStar(require("os"));
 const electron_1 = require("electron");
+electron_1.remote = require('@electron/remote');
 const environment_1 = require("../../utils/environment");
 const state = {
     version: environment_1.IS_ELECTRON_DEV ? environment_1.DEV_APP_VERSION : electron_1.remote.app.getVersion(),
     platform: os.platform(),
 };
 window.__ABOUT_PAGE_BRIDGE__ = state;
-//# sourceMappingURL=about.preload.js.map
\ No newline at end of file
+//# sourceMappingURL=about.preload.js.map
diff -uraN original/moba-desktop/src/windows/about/about.window.js modified/moba-desktop/src/windows/about/about.window.js
--- original/moba-desktop/src/windows/about/about.window.js	2021-11-04 20:19:04.967360713 +0000
+++ modified/moba-desktop/src/windows/about/about.window.js	2021-11-04 20:19:05.007360711 +0000
@@ -47,6 +47,7 @@
                 enableRemoteModule: true,
             },
         });
+        require("@electron/remote/main").enable(aboutWindow.webContents);
         navigation_1.initNavigationSecurity(aboutWindow);
         aboutWindow.setMenu(null);
         aboutWindow.loadURL(navigation_1.getSafetyWindowURL('/html/about-window.html'));
@@ -61,4 +62,4 @@
     aboutWindow ? (aboutWindow.isVisible() ? aboutWindow.hide() : aboutWindow.show()) : createAboutWindow();
 }
 exports.toggleAboutWindow = toggleAboutWindow;
-//# sourceMappingURL=about.window.js.map
\ No newline at end of file
+//# sourceMappingURL=about.window.js.map
diff -uraN original/moba-desktop/src/windows/game-overlay/game-overlay.window.js modified/moba-desktop/src/windows/game-overlay/game-overlay.window.js
--- original/moba-desktop/src/windows/game-overlay/game-overlay.window.js	2021-11-04 20:19:04.967360713 +0000
+++ modified/moba-desktop/src/windows/game-overlay/game-overlay.window.js	2021-11-04 20:19:05.007360711 +0000
@@ -55,7 +55,9 @@
             enableRemoteModule: true,
         },
     });
+    require("@electron/remote/main").enable(overlayWindow.webContents);
+
     navigation_1.initNavigationSecurity(overlayWindow);
     return overlayWindow;
 };
-//# sourceMappingURL=game-overlay.window.js.map
\ No newline at end of file
+//# sourceMappingURL=game-overlay.window.js.map
diff -uraN original/moba-desktop/src/windows/main/main.preload.js modified/moba-desktop/src/windows/main/main.preload.js
--- original/moba-desktop/src/windows/main/main.preload.js	2021-11-04 20:19:04.967360713 +0000
+++ modified/moba-desktop/src/windows/main/main.preload.js	2021-11-04 20:19:05.007360711 +0000
@@ -27,4 +27,4 @@
 window.__APP_ENV__ = environment_1.serializeAppConfig(appConfig, { APP_IS_DESKTOP: 'true' });
 window.__WINDOW_TYPE__ = desktop_types_1.DesktopWindowType.MAIN;
 console.info('App Logs: ', desktop_bridge_1.bridge.logsPath);
-//# sourceMappingURL=main.preload.js.map
\ No newline at end of file
+//# sourceMappingURL=main.preload.js.map
diff -uraN original/moba-desktop/src/windows/main/main.window.js modified/moba-desktop/src/windows/main/main.window.js
--- original/moba-desktop/src/windows/main/main.window.js	2021-11-04 20:19:04.967360713 +0000
+++ modified/moba-desktop/src/windows/main/main.window.js	2021-11-04 20:19:05.010694046 +0000
@@ -75,10 +75,12 @@
             },
             show: false,
             resizable: true,
+            icon: path.join(__dirname, "../../../../../resources/icons/512x512.png"),
             frame: false,
             titleBarStyle: 'hidden',
             maximizable: true,
         });
+        require("@electron/remote/main").enable(mainWindow.webContents);
         appWindowState.manage(mainWindow);
         mainWindow.loadURL(navigation_1.getSafetyWindowURL(url_1.AppPath.ONBOARDING_ROOT));
         navigation_1.initNavigationSecurity(mainWindow);
@@ -241,4 +243,4 @@
     window.loadURL(navigation_1.getSafetyWindowURL(url_1.AppPath.FORCE_DESKTOP_APP_UPDATE));
 }
 exports.redirectToForceUpdatePage = redirectToForceUpdatePage;
-//# sourceMappingURL=main.window.js.map
\ No newline at end of file
+//# sourceMappingURL=main.window.js.map
