diff -Nrup original/moba-desktop/src/app/app-update.js modified/moba-desktop/src/app/app-update.js
--- original/moba-desktop/src/app/app-update.js	2022-06-21 04:22:03.927706291 -0400
+++ modified/moba-desktop/src/app/app-update.js	2022-06-21 04:22:03.972707480 -0400
@@ -18,8 +18,8 @@ function init() {
     appUpdateController.onUpdateAvailable(analytics_1.Analytics.appUpdate.updateAvailable);
     appUpdateController.onUpdateDownloaded(analytics_1.Analytics.appUpdate.updateDownloaded);
     appUpdateController.onUpdateApplying(analytics_1.Analytics.appUpdate.updateApplying);
-    appUpdateController.onUpdateError(analytics_1.Analytics.appUpdate.updateError);
-    appUpdateController.start(true);
+    //appUpdateController.onUpdateError(analytics_1.Analytics.appUpdate.updateError);
+    appUpdateController.start(false);
 }
 exports.init = init;
 //# sourceMappingURL=app-update.js.map
\ No newline at end of file
diff -Nrup original/moba-desktop/src/app/deep-linking.js modified/moba-desktop/src/app/deep-linking.js
--- original/moba-desktop/src/app/deep-linking.js	2022-06-21 04:22:03.927706291 -0400
+++ modified/moba-desktop/src/app/deep-linking.js	2022-06-21 04:22:03.972707480 -0400
@@ -33,9 +33,17 @@ const game_overlay_1 = require("../utils
 const ipc_messages_types_1 = require("../../../moba-web/src/common/types/desktop/ipc-messages.types");
 const main_utils_1 = require("../windows/main/main.utils");
 function initDeepLinking() {
+    console.log('Inside initDeepLinking() .... ');
     electron_1.app.removeAsDefaultProtocolClient(app_config_1.MOBA_PROTOCOL_NAME);
     if (environment_1.IS_ELECTRON_DEV && environment_1.isWin) {
         electron_1.app.setAsDefaultProtocolClient(app_config_1.MOBA_PROTOCOL_NAME, process.execPath, [path.resolve(process.argv[1])]);
+    } else if (environment_1.isLinux) {
+        if (process.defaultApp) {
+            if (process.argv.length >= 2) {
+                console.log("Detected Linux environment!");
+                electron_1.app.setAsDefaultProtocolClient(app_config_1.MOBA_PROTOCOL_NAME, process.execPath, [path.resolve(process.argv[1])]);
+            }
+        }
     }
     else {
         electron_1.app.setAsDefaultProtocolClient(app_config_1.MOBA_PROTOCOL_NAME);
@@ -52,7 +60,7 @@ function addDeepLinkingListeners() {
         main_utils_1.showAndRestoreMainWindow();
     });
     electron_1.app.on('second-instance', (_e, argv) => {
-        if (environment_1.isWin) {
+        if (environment_1.isWin || environment_1.isLinux) {
             const url = argv.find(it => it.startsWith(`${app_config_1.MOBA_PROTOCOL_NAME}:`));
             url && processDeepLinkingUrl(url);
         }
@@ -90,4 +98,4 @@ function processDeepLinkingUrl(originalU
         logs_1.appUrlsLog.error('Unknown moba protocol communication url: ', { url });
     }
 }
-//# sourceMappingURL=deep-linking.js.map
\ No newline at end of file
+//# sourceMappingURL=deep-linking.js.map
diff -Nrup original/moba-desktop/src/app/ipc-protocol/ipc-protocol.js modified/moba-desktop/src/app/ipc-protocol/ipc-protocol.js
--- original/moba-desktop/src/app/ipc-protocol/ipc-protocol.js	2022-06-21 04:22:03.928706318 -0400
+++ modified/moba-desktop/src/app/ipc-protocol/ipc-protocol.js	2022-06-21 04:22:03.972707480 -0400
@@ -20,4 +20,4 @@ function init() {
     post_game_highlights_ipc_1.initPostGameHighlightsIpc();
 }
 exports.init = init;
-//# sourceMappingURL=ipc-protocol.js.map
\ No newline at end of file
+//# sourceMappingURL=ipc-protocol.js.map
diff -Nrup original/moba-desktop/src/dialogs/select-game-folder-dialog.js modified/moba-desktop/src/dialogs/select-game-folder-dialog.js
--- original/moba-desktop/src/dialogs/select-game-folder-dialog.js	2022-06-21 04:22:03.926706265 -0400
+++ modified/moba-desktop/src/dialogs/select-game-folder-dialog.js	2022-06-21 04:24:06.559944867 -0400
@@ -13,6 +13,7 @@ exports.showSelectLolClientFolderDialog
 const ipc_messages_types_1 = require("../../../moba-web/src/common/types/desktop/ipc-messages.types");
 const remote_1 = require("@electron/remote");
 const ipc_renderer_1 = require("../utils/ipc-renderer");
+const prompt = require('electron-prompt');
 function showSelectLolClientFolderDialog(window) {
     if (remote_1.dialog) {
         return remote_1.dialog
@@ -21,8 +22,29 @@ function showSelectLolClientFolderDialog
             message: 'Choose the LoL installation path. e.g /Applications/League of Legends.app/',
             buttonLabel: 'Select Directory',
             properties: ['openDirectory', 'treatPackageAsDirectory', 'showHiddenFiles'],
-        })
-            .then((result) => __awaiter(this, void 0, void 0, function* () {
+        }).then(result => {
+            return new Promise((res, rej) => {
+                if(result.canceled) {
+                        prompt({
+                                title: 'Enter the LoL installation path',
+                                label: 'Path must be exact',
+                                value: '/drive_c/Riot Games/League of Legends/',
+                                inputAttrs: {
+                                    type: 'text'
+                                },
+                            type: 'input'
+                        }, window).then((r) => {
+                                if(r === null) {
+                                        res(result);
+                                } else {
+                                        res({filePaths:[r]});
+                                }
+                           });
+                   } else {
+                       res(result);
+                   }
+               })
+            }).then((result) => __awaiter(this, void 0, void 0, function* () {
             if (!result.canceled) {
                 const folder = result.filePaths ? result.filePaths[0] : null;
                 const setupResult = yield ipc_renderer_1.ipcRendererInvoke(ipc_messages_types_1.IPC_MESSAGE.SET_GAME_FOLDER_PATH, folder);
@@ -46,4 +68,4 @@ function showSelectLolClientFolderDialog
     }
 }
 exports.showSelectLolClientFolderDialog = showSelectLolClientFolderDialog;
-//# sourceMappingURL=select-game-folder-dialog.js.map
\ No newline at end of file
+//# sourceMappingURL=select-game-folder-dialog.js.map
diff -Nrup original/moba-desktop/src/lol/utils/in-game-imports/in-game-items-import.js modified/moba-desktop/src/lol/utils/in-game-imports/in-game-items-import.js
--- original/moba-desktop/src/lol/utils/in-game-imports/in-game-items-import.js	2022-06-21 04:22:03.894705420 -0400
+++ modified/moba-desktop/src/lol/utils/in-game-imports/in-game-items-import.js	2022-06-21 04:22:03.973707506 -0400
@@ -44,7 +44,7 @@ function importLolGameItems(gameItemsDat
             if (!gameItemsData.blocks.length)
                 return in_game_imports_types_1.LcuGameItemsImportStatus.EMPTY_BLOCKS_LIST;
             const processGamePath = yield lcu_connection_1.getLCUPathFromProcess();
-            const gamePath = processGamePath || root_store_1.getAppSettings().getGameFolderPath();
+            const gamePath = root_store_1.getAppSettings().getGameFolderPath();
             if (!gamePath)
                 return in_game_imports_types_1.LcuGameItemsImportStatus.GAME_PATH_NOT_FOUND;
             const filePath = path_1.default.join(gamePath, 'Config', 'Global', 'Recommended', '!mobalytics.json');
@@ -70,4 +70,4 @@ function importLolGameItems(gameItemsDat
     });
 }
 exports.importLolGameItems = importLolGameItems;
-//# sourceMappingURL=in-game-items-import.js.map
\ No newline at end of file
+//# sourceMappingURL=in-game-items-import.js.map
diff -Nrup original/moba-desktop/src/main.js modified/moba-desktop/src/main.js
--- original/moba-desktop/src/main.js	2022-06-21 04:22:03.885705182 -0400
+++ modified/moba-desktop/src/main.js	2022-06-21 04:22:03.973707506 -0400
@@ -9,4 +9,14 @@ const MakePromisesSafe = require('make-p
 MakePromisesSafe.logError = (err) => logs_1.generalLog.error('Uncaught promise exception error: ', err);
 const gotTheLock = electron_1.app.requestSingleInstanceLock();
 gotTheLock ? app_1.runApp() : electron_1.app.quit();
-//# sourceMappingURL=main.js.map
\ No newline at end of file
+//# sourceMappingURL=main.js.map
+process
+    .on('unhandledRejection', (reason, p) => {
+        electron_1.dialog.showMessageBoxSync(null, {title: "Uncaught Error", message: err});
+        console.error(reason, 'Unhandled Rejection at Promise', p);
+    })
+    .on('uncaughtException', err => {
+        electron_1.dialog.showMessageBoxSync(null, {title: "Uncaught Error", message: err});
+        console.error(err, 'Uncaught Exception thrown');
+        process.exit(1);
+    });
diff -Nrup original/moba-desktop/src/utils/desktop-bridge.js modified/moba-desktop/src/utils/desktop-bridge.js
--- original/moba-desktop/src/utils/desktop-bridge.js	2022-06-21 04:22:03.886705208 -0400
+++ modified/moba-desktop/src/utils/desktop-bridge.js	2022-06-21 04:22:03.973707506 -0400
@@ -23,16 +23,23 @@ exports.bridge = void 0;
 const os = __importStar(require("os"));
 const path = __importStar(require("path"));
 const remote_1 = require("@electron/remote");
+console.log("In Desktop Bridge: getting select_game_folder_dialog_1 ....");
 const select_game_folder_dialog_1 = require("../dialogs/select-game-folder-dialog");
+console.log("In Desktop Bridge: getting ipc_renderer_1 ....");
 const ipc_renderer_1 = require("./ipc-renderer");
+console.log("In Desktop Bridge: getting select_folder_dialog_1 ....");
 const select_folder_dialog_1 = require("../dialogs/select-folder-dialog");
+console.log("In Desktop Bridge: getting show_file_dialog_1 ....");
 const show_file_dialog_1 = require("../dialogs/show-file-dialog");
+console.log("In Desktop Bridge: getting version_const_1 ....");
 const version_const_1 = require("./version.const");
+console.log("Get OS Platform....");
 const platform = os.platform();
 exports.bridge = {
     version: remote_1.app.getVersion() === '0.0.1' ? version_const_1.DEV_DESKTOP_APP_VERSION : remote_1.app.getVersion(),
     platform,
     isWin: platform !== 'darwin',
+    isLinux: platform !== 'darwin',
     isMac: platform === 'darwin',
     logsPath: path.resolve(remote_1.app.getPath('logs')),
     settings: null,
@@ -57,4 +64,4 @@ exports.bridge = {
     openSelectFolderDialogInCurrentWindow: () => select_folder_dialog_1.showSelectFolderDialog(remote_1.getCurrentWindow()),
     highlightFileInFileSystem: show_file_dialog_1.showFileDialog,
 };
-//# sourceMappingURL=desktop-bridge.js.map
\ No newline at end of file
+//# sourceMappingURL=desktop-bridge.js.map
diff -Nrup original/moba-desktop/src/utils/environment.js modified/moba-desktop/src/utils/environment.js
--- original/moba-desktop/src/utils/environment.js	2022-06-21 04:22:03.886705208 -0400
+++ modified/moba-desktop/src/utils/environment.js	2022-06-21 04:22:03.973707506 -0400
@@ -24,15 +24,16 @@ const path = __importStar(require("path"
 exports.APP_USER_MODEL_ID = 'MobalyticsHQ.DesktopApp';
 exports.isOsX = process.platform === 'darwin';
 exports.isWin = process.platform === 'win32';
+exports.isLinux = process.platform === 'linux';
 exports.isX64 = process.arch === 'x64';
 exports.IS_JEST_TESTING = process.env.JEST_WORKER_ID !== undefined;
-exports.IS_ELECTRON_DEV = require('electron-is-dev');
+exports.IS_ELECTRON_DEV = false;
 exports.LoLProcessNameWin = 'LeagueClient.exe';
 exports.LoLProcessNameMac = 'LeagueClient.app';
-exports.LolProcessName = exports.isWin ? exports.LoLProcessNameWin : exports.LoLProcessNameMac;
+exports.LolProcessName = (exports.isWin || exports.isLinux) ? exports.LoLProcessNameWin : exports.LoLProcessNameMac;
 exports.RiotClientNameWin = 'RiotClientServices.exe';
 exports.RiotClientNameMac = '';
 exports.RiotClientName = exports.isWin ? exports.RiotClientNameWin : exports.RiotClientNameMac;
 exports.LolLogsSubPath = path.join('Logs', 'GameLogs');
 exports.AppExecPath = `"${path.normalize(path.resolve(process.execPath))}"`;
-//# sourceMappingURL=environment.js.map
\ No newline at end of file
+//# sourceMappingURL=environment.js.map
diff -Nrup original/moba-desktop/src/utils/lcu-connection.js modified/moba-desktop/src/utils/lcu-connection.js
--- original/moba-desktop/src/utils/lcu-connection.js	2022-06-21 04:22:03.886705208 -0400
+++ modified/moba-desktop/src/utils/lcu-connection.js	2022-06-21 04:22:03.973707506 -0400
@@ -124,4 +124,4 @@ function isValidLCUPath(dirPath) {
     });
 }
 exports.isValidLCUPath = isValidLCUPath;
-//# sourceMappingURL=lcu-connection.js.map
\ No newline at end of file
+//# sourceMappingURL=lcu-connection.js.map
diff -Nrup original/moba-desktop/src/windows/about/about.window.js modified/moba-desktop/src/windows/about/about.window.js
--- original/moba-desktop/src/windows/about/about.window.js	2022-06-21 04:22:03.886705208 -0400
+++ modified/moba-desktop/src/windows/about/about.window.js	2022-06-21 04:22:03.973707506 -0400
@@ -22,7 +22,7 @@ Object.defineProperty(exports, "__esModu
 exports.toggleAboutWindow = void 0;
 const path = __importStar(require("path"));
 const electron_1 = require("electron");
-const remote = __importStar(require("@electron/remote/main"));
+//const remote = __importStar(require("@electron/remote/main"));
 const desktop_default_settings_1 = require("../../../../moba-web/src/common/desktop-default-settings");
 const navigation_1 = require("../../utils/navigation");
 let aboutWindow;
@@ -48,7 +48,7 @@ function createAboutWindow() {
                 autoplayPolicy: 'user-gesture-required',
             },
         });
-        remote.enable(aboutWindow.webContents);
+        require("@electron/remote/main").enable(aboutWindow.webContents);
         navigation_1.initNavigationSecurity(aboutWindow);
         aboutWindow.setMenu(null);
         aboutWindow.loadURL(navigation_1.getSafetyWindowURL('/html/about-window.html'));
@@ -63,4 +63,4 @@ function toggleAboutWindow() {
     aboutWindow ? (aboutWindow.isVisible() ? aboutWindow.hide() : aboutWindow.show()) : createAboutWindow();
 }
 exports.toggleAboutWindow = toggleAboutWindow;
-//# sourceMappingURL=about.window.js.map
\ No newline at end of file
+//# sourceMappingURL=about.window.js.map
diff -Nrup original/moba-desktop/src/windows/game-overlay/game-overlay.window.js modified/moba-desktop/src/windows/game-overlay/game-overlay.window.js
--- original/moba-desktop/src/windows/game-overlay/game-overlay.window.js	2022-06-21 04:22:03.885705182 -0400
+++ modified/moba-desktop/src/windows/game-overlay/game-overlay.window.js	2022-06-21 04:22:03.974707532 -0400
@@ -25,7 +25,6 @@ const electron_1 = require("electron");
 const logs_1 = require("../../utils/logs");
 const navigation_1 = require("../../utils/navigation");
 const environment_1 = require("../../utils/environment");
-const remote = __importStar(require("@electron/remote/main"));
 exports.getGameOverlayWindow = (isOffscreenMode = true, size, factor = 1) => {
     logs_1.gameOverlayLog.debug('Create game overlay window | main script', {
         path: path.join(__dirname, '../main/main.preload.js'),
@@ -56,8 +55,8 @@ exports.getGameOverlayWindow = (isOffscr
             autoplayPolicy: 'user-gesture-required',
         },
     });
-    remote.enable(overlayWindow.webContents);
+    require("@electron/remote/main").enable(aboutWindow.webContents);
     navigation_1.initNavigationSecurity(overlayWindow);
     return overlayWindow;
 };
-//# sourceMappingURL=game-overlay.window.js.map
\ No newline at end of file
+//# sourceMappingURL=game-overlay.window.js.map
diff -Nrup original/moba-desktop/src/windows/main/main.preload.js modified/moba-desktop/src/windows/main/main.preload.js
--- original/moba-desktop/src/windows/main/main.preload.js	2022-06-21 04:22:03.885705182 -0400
+++ modified/moba-desktop/src/windows/main/main.preload.js	2022-06-21 04:22:03.974707532 -0400
@@ -27,4 +27,4 @@ window.__DESKTOP__BRIDGE__ = desktop_bri
 window.__APP_ENV__ = environment_1.serializeAppConfig(appConfig, { APP_IS_DESKTOP: 'true' });
 window.__WINDOW_TYPE__ = desktop_types_1.DesktopWindowType.MAIN;
 console.info('App Logs: ', desktop_bridge_1.bridge.logsPath);
-//# sourceMappingURL=main.preload.js.map
\ No newline at end of file
+//# sourceMappingURL=main.preload.js.map
diff -Nrup original/moba-desktop/src/windows/main/main.utils.js modified/moba-desktop/src/windows/main/main.utils.js
--- original/moba-desktop/src/windows/main/main.utils.js	2022-06-21 04:22:03.885705182 -0400
+++ modified/moba-desktop/src/windows/main/main.utils.js	2022-06-21 04:22:03.974707532 -0400
@@ -6,6 +6,7 @@ const root_store_1 = require("../../comm
 const logs_1 = require("../../utils/logs");
 const navigation_1 = require("../../utils/navigation");
 const main_window_1 = require("./main.window");
+console.log("PREPARE TO BRING UP MAIN WINDOW CONTENTS() ....");
 function sendAppUpdateStatus(status, progress) {
     const payload = { status, progress: progress || null };
     sendToMainWindow(ipc_messages_types_1.IPC_MESSAGE.APP_UPDATE_STATUS_CHANGED, payload);
@@ -144,4 +145,4 @@ function recreateMainWindow() {
     logs_1.generalLog.debug('Main window recreated');
 }
 exports.recreateMainWindow = recreateMainWindow;
-//# sourceMappingURL=main.utils.js.map
\ No newline at end of file
+//# sourceMappingURL=main.utils.js.map
diff -Nrup original/moba-desktop/src/windows/main/main.window.js modified/moba-desktop/src/windows/main/main.window.js
--- original/moba-desktop/src/windows/main/main.window.js	2022-06-21 04:22:03.885705182 -0400
+++ modified/moba-desktop/src/windows/main/main.window.js	2022-06-21 04:22:03.974707532 -0400
@@ -32,8 +32,12 @@
 const lang_1 = require("../../../../moba-web/src/common/types/lang");
 const window_unresponsive_dialog_1 = require("../../dialogs/window-unresponsive-dialog");
 const url_1 = require("../../../../moba-web/src/common/types/url");
-const remote = __importStar(require("@electron/remote/main"));
+//const remote = __importStar(require("@electron/remote/main"));
 const root_store_1 = require("../../common/store/root-store");
+const adblocker1 = require("@cliqz/adblocker-electron");
+const fetch1 = require("node-fetch");
+const fs1 = require("fs");
+
 let mainWindow;
 let appWindowState;
 function getMainWindowState() {
@@ -44,7 +48,7 @@
     return mainWindow;
 }
 exports.getMainWindow = getMainWindow;
-function ensureMainWindow() {
+async function ensureMainWindow() {
     logs_1.generalLog.debug('Ensure main window');
     if (!mainWindow) {
         const { width: settingsWidth, height: settingsHeight } = root_store_1.getAppSettings().getDefaultAppWindowSize();    
@@ -57,6 +61,18 @@
             fullScreen: false,
             maximize: false,
         });
+        const blocker = await adblocker1.ElectronBlocker.fromLists(
+                fetch,
+                adblocker1.fullLists,
+                {
+                  enableCompression: true,
+                },
+                {
+                  path: 'engine.bin',
+                  read: async (...args) => fs1.readFileSync(...args),
+                  write: async (...args) => fs1.writeFileSync(...args),
+                },
+              );
         mainWindow = new electron_1.BrowserWindow({
             minWidth: desktop_default_settings_1.MIN_WINDOW_WIDTH,
             minHeight: desktop_default_settings_1.MIN_WINDOW_HEIGHT,
@@ -75,15 +75,19 @@ function ensureMainWindow() {
                 allowRunningInsecureContent: false,
                 experimentalFeatures: false,
                 autoplayPolicy: 'user-gesture-required',
+                nativeWindowOpen: true 
             },
             show: false,
             resizable: true,
+            icon: path.join(__dirname, "../../../../../resources/icons/512x512.png"),
             frame: false,
             titleBarStyle: 'hidden',
             maximizable: true,
         });
+        require("@electron/remote/main").enable(mainWindow.webContents);
+        blocker.enableBlockingInSession(mainWindow.webContents.session);
         appWindowState.manage(mainWindow);
+        mainWindow.setMenu(null);         
-        remote.enable(mainWindow.webContents);
         mainWindow.loadURL(navigation_1.getSafetyWindowURL(url_1.AppPath.ONBOARDING_ROOT));
         navigation_1.initNavigationSecurity(mainWindow);
         mainWindow.on('ready-to-show', () => {
@@ -107,4 +108,4 @@ function ensureMainWindow() {
     return mainWindow;
 }
 exports.ensureMainWindow = ensureMainWindow;
-//# sourceMappingURL=main.window.js.map
\ No newline at end of file
+//# sourceMappingURL=main.window.js.map
diff -Nrup original/moba-desktop/src/common/store/root-store.js modified/moba-desktop/src/common/store/root-store.js
--- original/moba-desktop/src/common/store/root-store.js	2022-09-14 17:53:25.981996569 -0300
+++ modified/moba-desktop/src/common/store/root-store.js	2022-09-14 18:08:26.919110933 -0300
@@ -25,7 +25,7 @@
 const app_settings_1 = require("../../app/app-settings/app-settings");
 const lcu_state_processor_1 = require("../lcu-state-processor/lcu-state-processor");
 const lcu_state_processor_2 = require("../../types/lcu-state-processor");
-const ads_refresh_service_1 = require("../services/app-update/ads-refresh/ads-refresh.service");
+//const ads_refresh_service_1 = require("../services/app-update/ads-refresh/ads-refresh.service");
 class RootStore {
     constructor() {
         this.appStore = new app_store_1.AppStore();
@@ -47,8 +47,8 @@
         const desktopAppUpdateService = new desktop_app_update_service_1.DesktopAppUpdateService();
         const webAppUpdateService = new web_app_update_service_1.WebAppUpdateService();
         const appUpdateControlService = new app_update_control_service_1.AppUpdateControlService(lcStateService);
-        const adsRefreshService = new ads_refresh_service_1.AdsRefreshService(settingsStore, this.accountStore);
-        this.appUpdateController = new app_update_controller_1.AppUpdateController(desktopAppUpdateService, webAppUpdateService, adsRefreshService, appUpdateControlService, webAppLoadingService, userInactivityChecker, app_config_1.DESKTOP_APP_UPDATE_CHECK_INTERVAL);
+        //const adsRefreshService = new ads_refresh_service_1.AdsRefreshService(settingsStore, this.accountStore);
+        this.appUpdateController = new app_update_controller_1.AppUpdateController(desktopAppUpdateService, webAppUpdateService, appUpdateControlService, webAppLoadingService, userInactivityChecker, app_config_1.DESKTOP_APP_UPDATE_CHECK_INTERVAL);
     }
     static getInstance() {
         if (!RootStore.instance) {
diff -Nrup original/moba-desktop/src/common/controllers/app-update.controller.js modified/moba-desktop/src/common/controllers/app-update.controller.js
--- original/moba-desktop/src/common/controllers/app-update.controller.js	2022-09-14 18:12:05.889787413 -0300
+++ modified/moba-desktop/src/common/controllers/app-update.controller.js	2022-09-14 18:16:25.852223998 -0300
@@ -22,11 +22,10 @@
 const clone_deep_1 = __importDefault(require("clone-deep"));
 const promise_with_timeout_1 = require("../../../../moba-web/src/common/utils/promise-with-timeout");
 class AppUpdateController extends events_1.EventEmitter {
-    constructor(desktopAppUpdateService, webAppUpdateService, adsRefreshService, appUpdateControlService, webAppLoadingService, inactivityUserCheckerService, updateCheckInterval) {
+    constructor(desktopAppUpdateService, webAppUpdateService, appUpdateControlService, webAppLoadingService, inactivityUserCheckerService, updateCheckInterval) {
         super();
         this.desktopAppUpdateService = desktopAppUpdateService;
         this.webAppUpdateService = webAppUpdateService;
-        this.adsRefreshService = adsRefreshService;
         this.appUpdateControlService = appUpdateControlService;
         this.webAppLoadingService = webAppLoadingService;
         this.inactivityUserCheckerService = inactivityUserCheckerService;
@@ -57,12 +56,10 @@
             return Promise.all([
                 this.desktopAppUpdateService.checkUpdate(),
                 this.webAppUpdateService.checkUpdate(),
-                this.adsRefreshService.checkUpdate(),
-            ]).then(([isDesktopAppUpdate, isWebAppUpdate, isAdsRefresh]) => {
+            ]).then(([isDesktopAppUpdate, isWebAppUpdate]) => {
                 state.checkResults = {
                     hasDesktopApp: isDesktopAppUpdate,
-                    hasWebApp: isWebAppUpdate,
-                    hasAds: isAdsRefresh,
+                    hasWebApp: isWebAppUpdate
                 };
                 this.log('Updates check results', { state });
                 if (app_update_utils_1.isThereAtLeastOneTrueResult(state.checkResults)) {
@@ -95,10 +92,6 @@
                 this.log(`Start downloading desktop app update.`);
                 data.prepareResults.hasDesktopApp = yield this.desktopAppUpdateService.downloadUpdate();
             }
-            if (checkResults.hasAds) {
-                this.log(`Start processing ads update.`);
-                data.prepareResults.hasAds = true;
-            }
             if (checkResults.hasWebApp) {
                 this.log(`Start processing web app update.`);
                 data.prepareResults.hasWebApp = true;
@@ -184,10 +177,6 @@
             this.log('Start desktop app update installing');
             return this.desktopAppUpdateService.applyUpdate();
         }
-        if (prepareResults.hasAds) {
-            this.log('Start ads refresh applying');
-            return this.adsRefreshService.applyUpdate();
-        }
         if (prepareResults.hasWebApp) {
             this.log('Start web app update processing');
             return this.webAppUpdateService.applyUpdate();
@@ -224,14 +213,11 @@
                 checks = this.state.checkResults;
                 break;
         }
-        const { hasWebApp, hasDesktopApp, hasAds } = checks;
+        const { hasWebApp, hasDesktopApp } = checks;
         let kind = null;
         if (hasDesktopApp) {
             kind = 'Desktop';
         }
-        else if (hasAds) {
-            kind = 'Ads';
-        }
         else if (hasWebApp) {
             kind = 'Web';
         }
diff -Nrup original/moba-desktop/src/common/controllers/app-update.controller.test.jsmodified/moba-desktop/src/common/controllers/app-update.controller.test.js
--- original/moba-desktop/src/common/controllers/app-update.controller.test.js	2022-09-14 18:19:17.002148054 -0300
+++ modified/moba-desktop/src/common/controllers/app-update.controller.test.js	2022-09-14 18:24:42.599710786 -0300
@@ -10,7 +10,7 @@
 const logs_1 = require("../../utils/logs");
 const account_store_mock_1 = require("../../mocks/account-store.mock");
 const root_store_1 = require("../store/root-store");
-const ads_refresh_service_mock_1 = require("../../mocks/ads-refresh.service.mock");
+//const ads_refresh_service_mock_1 = require("../../mocks/ads-refresh.service.mock");
 const app_update_controller_mock_1 = require("../../mocks/app-update.controller.mock");
 const app_update_control_service_1 = require("../services/app-update/app-update-control.service");
 describe('App updater', () => {
@@ -18,14 +18,14 @@
     const webAppUpdateService = new web_app_update_service_mock_1.WebAppUpdateServiceMock();
     const appSettingsStoreMock = root_store_1.getAppSettings();
     const accountStoreMock = new account_store_mock_1.AccountStoreMock();
-    const adsRefreshService = new ads_refresh_service_mock_1.AdsRefreshServiceMock(appSettingsStoreMock, accountStoreMock);
+    //const adsRefreshService = new ads_refresh_service_mock_1.AdsRefreshServiceMock(appSettingsStoreMock, accountStoreMock);
     const liveCompanionStataMock = new live_companion_stata_mock_1.LiveCompanionStataMock();
     const appStore = { isWebAppLoaded: true };
     const webAppLoadingServiceLogger = new logger_service_1.LoggerService(logs_1.appAutoUpdateLog, 'Web app loading service');
     const webAppLoadingService = new web_app_loading_service_1.WebAppLoadingService(5, appStore, webAppLoadingServiceLogger);
     const appUpdateControlServiceMock = new app_update_control_service_1.AppUpdateControlService(liveCompanionStataMock);
     const inactivityUserChecker = new inactivity_user_checker_mock_1.InactivityUserCheckerMock(1000, 3000, liveCompanionStataMock);
-    const updater = new app_update_controller_mock_1.AppUpdateControllerMock(desktopAppUpdateServiceMock, webAppUpdateService, adsRefreshService, appUpdateControlServiceMock, webAppLoadingService, inactivityUserChecker, 10 * 1000);
+    const updater = new app_update_controller_mock_1.AppUpdateControllerMock(desktopAppUpdateServiceMock, webAppUpdateService, appUpdateControlServiceMock, webAppLoadingService, inactivityUserChecker, 10 * 1000);
     beforeEach(() => {
         inactivityUserChecker.inactive = true;
         inactivityUserChecker.start();
@@ -35,7 +35,7 @@
         desktopAppUpdateServiceMock.isUpdateAvailable = false;
         desktopAppUpdateServiceMock.isUpdateDownloaded = false;
         webAppUpdateService.isUpdateAvailable = false;
-        adsRefreshService.isUpdateAvailable = false;
+        //adsRefreshService.isUpdateAvailable = false;
         liveCompanionStataMock.setFlowPhase(lc_companion_desktop_data_type_1.LcuFlowSessionPhase.None);
         inactivityUserChecker.stop();
         updater.stop();
@@ -106,12 +106,8 @@
     }, 30 * 1000);
     it(`
     WepApp loaded.
-    Ads refresh is available. 
-    Only on 3rd update check user becomes inactive.
-    Ads update should be successfully applied and it should happened only once.
     `, done => {
         appStore.isWebAppLoaded = true;
-        adsRefreshService.isUpdateAvailable = true;
         inactivityUserChecker.inactive = false;
         updater.start();
         let j = 0;
@@ -120,9 +116,6 @@
             if (j === 2)
                 inactivityUserChecker.inactive = true;
         });
-        adsRefreshService.on('apply-update', () => {
-            done();
-        });
     }, 300 * 1000);
     describe('Force update', () => {
         it(`      
